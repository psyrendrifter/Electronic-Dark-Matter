import matplotlib.pyplot as plt
import numpy as np
import math as m

#this script takes in a MadAnalysis5job.saf file containing a histogram with an input width and gamma histogram, 
#write the width in the .saf file as:
# width {width in MeV (mm)} MeV (mm)

with open('Output/_defaultset/MadAnalysis5job.saf') as f:
        content = f.readlines()
content = [x.strip() for x in content]
content = [x.split(" ") for x in content] #parses the .saf file and gets better format

#.saf converter possibly needed here: CHECK if there's an error

p_gamma = []
delta_gamma = 100
norm = 1
width = 0

for i in range(len(content)):
    if len(content[i])>2 and content[i][1] == 'nbins': #using structure of .saf file
        dgamma = (float(content[i+1][15])-float(content[i+1][12]))/float(content[i+1][0])
        #finds bin width and assigns to delta_gamma
    if len(content[i])>6 and content[i][5] == 'event-weights':
        norm = float(content[i][0]) #get the total integrated luminosity? Whatever normalizes the distribution to unity
    if len(content[i])>2 and content[i][1] == 'width': #you HAVE to comment in the width
	if content[i][3] == 'MeV':
		width = float(content[i][2])/(1.97327e-10) * 3.0*10**11
	if content[i][3] == 'mm':
		width = 3.0*10**11 * 1/float(content[i][2])
        ##Here we have returned width in 1/s


#DEBUG BLOCK
#print content
#print width
#print dgamma
#print norm

for i in range(len(content)):
    if content[i][0] == '<Data>':
        for j in range(100):
            p_gamma.append(float(content[i+2+j][0])/(norm*dgamma)) #add a new value into our discrete distribution: probability that gamma is within the value between. p_gamma ~ dP/dgamma


##########DEBUG BLOCK###########
#print content
#print width
#print dgamma
#print norm
#print p_gamma
################################

#####NORMTALIZATION OF p_gamma#############
"""normtest = 0
for i in range(len(p_gamma)):
    normtest+=p_gamma[i]*dgamma
    
print normtest"""
############################################

if width == 0:
    print('Particle width is 0!')

times = np.linspace(0, 40/width, num = len(p_gamma))
rho_t = [] #this will hold our values for the purely time based pdf for survival time
gamma = np.linspace(1, 1+dgamma*len(p_gamma), num = len(p_gamma)) #the values of gamma in the bins, with increments of dgamma

i = 0

for t in times:
    rho = 0
    i = 0
    while i < len(gamma):
        rho += width/gamma[i] * m.e**(-width*t/gamma[i]) * p_gamma[i]*dgamma
        i += 1
    rho_t.append(rho)
plt.figure(1)
plt.xlabel("time (s)")
plt.ylabel("pdf of survival (1/s)")
#plt.ylim(ymin=0)

####NORMALIZATION OF RHO_T:##############
norm = 0
for i in range(len(rho_t)-1):
    norm+=rho_t[i]*(times[i+1]-times[i])
#norm+=rho_t[len(rho_t)-1]*(times[len(times)-1]-times[len(times)-2])
#includes the last riemannian segment of the distribution
print norm
for i in range(len(rho_t)):
    rho_t[i] = rho_t[i]/norm
#########################################

for i in range(len(times)):
    plt.errorbar(times[i], rho_t[i], fmt = 'ro')
plt.show()
